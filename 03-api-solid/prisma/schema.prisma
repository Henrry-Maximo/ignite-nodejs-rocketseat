// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

// um @ para configurar o campo
// dois @ para configurar a tabela

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(MEMBER)
  created_at    DateTime @default(now())

  checkIns CheckIn[]

  @@map("users") // trocar nome da tabela no banco
}

model CheckIn {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  validated_at DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  gym    Gym    @relation(fields: [gym_id], references: [id])
  gym_id String

  // user_id String @relation()
  // gym_id String

  @@map("check_ins")
}

model Gym {
  id          String  @id @default(uuid())
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal

  checkIns CheckIn[]

  @@map("gyms")
}

// @@map() -> Renomear
// ? -> Opcional
// validated_at -> Presente? / Quando?
// vai e volta  -> Algoritmo de Criptografia
// Hashing -> ir

// 1 - 1 => um aluno pode ter um checkin 
// 1 - n => uma acadêmia pode ter vários alunos
// n - n => um grupo de alunos pode ter vários checkins, e os 
// checkins podem ter vários alunos
