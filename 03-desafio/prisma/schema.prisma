generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  AVAILABLE // Ready for adoption / use
  ADOPTED // Already adopted / finalized
  RESERVED // In reservation or adoption process
  UNAVAILABLE // Temporarily unavailable
}

enum Age {
  PUPPY // 0–1 year
  YOUNG // 1–3 years
  ADULT // 3–7 years
  SENIOR // 7+ years
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum Power {
  LOW // Calm / quiet
  MODERATE // Balanced energy
  HIGH // Very active / energetic
}

enum Independence {
  LOW // Requires attention / dependent
  MEDIUM // Moderately independent
  HIGH // Very independent
}

enum Ambience {
  SMALL_SPACE // Apartments, small areas
  MEDIUM_SPACE // Small to medium houses
  LARGE_SPACE // Large houses, yards, farms
}

model Pet {
  id           String       @id @default(uuid())
  name         String
  description  String
  status       Status       @default(AVAILABLE)
  age          Age          @default(YOUNG) // Faixa etária
  size         Size         @default(MEDIUM) // Porte físico
  power        Power        @default(MODERATE) // Nível de energia
  independence Independence @default(MEDIUM) // Grau de independência
  ambience     Ambience     @default(MEDIUM_SPACE) // Ambiente necessário
  path         String // Endereço da imagem
  requisites   String[] // Lista de requisitos para adoção (inserida pela ORG)
  created_at   DateTime     @default(now())

  // Relacionamento: Pet pertence a uma ORG
  org    Org    @relation(fields: [org_id], references: [id])
  org_id String

  @@map("pet_pets") // Nome da tabela no banco
}

model Org {
  id            String   @id @default(uuid())
  name          String
  password_hash String
  email         String   @unique
  postal_code   String
  address       String
  phone         String
  created_at    DateTime @default(now())

  pet Pet[]

  @@map("pet_orgs")
}
