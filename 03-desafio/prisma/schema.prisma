// Schema Prisma para API de Adoção de Pets
// Baseado nos requisitos funcionais e regras de negócio definidas

// Gerador do cliente Prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma" // Cliente gerado em pasta customizada
}

// Configuração do banco PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // URL vem das variáveis de ambiente
}

// === ENUMS PARA CARACTERÍSTICAS DOS PETS ===

// Faixa etária do pet
enum Age {
  FILHOTE // Pet jovem
  ADULTO // Pet maduro
  IDOSO // Pet idoso
}

// Porte físico do pet
enum Size {
  PEQUENINO // Pets pequenos
  MEDIANO // Pets médios
  GRANDINHO // Pets grandes
}

// Nível de energia/atividade
enum Power {
  BAIXA // Pet calmo
  MEDIA // Pet moderado
  ALTA // Pet muito ativo
}

// Grau de independência
enum Independence {
  BAIXA // Precisa de muita atenção
  MEDIA // Moderadamente independente
  ALTA // Muito independente
}

// Tipo de ambiente necessário
enum Ambience {
  PEQUENO // Apartamentos, espaços pequenos
  AMPLO // Casas, quintais, espaços grandes
}

// Status de disponibilidade para adoção
enum Status {
  DISPONÍVEL // Pet disponível para adoção
  INDISPONÍVEL // Pet já adotado ou indisponível
}

// === MODELO PET ===
// Representa os animais disponíveis para adoção
model Pet {
  id           String       @id @default(uuid()) // ID único gerado automaticamente
  name         String // Nome do pet
  description  String // Descrição detalhada do pet
  status       Status // Status de disponibilidade
  age          Age // Faixa etária
  size         Size // Porte físico
  power        Power // Nível de energia
  independence Independence // Grau de independência
  ambience     Ambience // Ambiente necessário
  requisites   String[] // Lista de requisitos para adoção (inserida pela ORG)
  created_at   DateTime     @default(now()) // Data de cadastro automática

  // Relacionamento: Pet pertence a uma ORG
  org    Org    @relation(fields: [org_id], references: [id])
  org_id String // Chave estrangeira obrigatória

  @@map("pet_pets") // Nome da tabela no banco
}

// === MODELO ORG ===
// Representa as organizações responsáveis pelos pets
// RN: Uma ORG precisa ter endereço e WhatsApp
// RN: Para uma ORG acessar como admin, precisa estar logada
model Org {
  id            String   @id @default(uuid()) // ID único gerado automaticamente
  name          String // Nome da organização
  email         String   @unique // Email único para login
  postal_code   String // CEP do endereço
  address       String // Endereço completo
  city          String // Cidade (obrigatório para filtros)
  phone         String // WhatsApp para contato (obrigatório)
  password_hash String // Senha criptografada para login
  created_at    DateTime @default(now()) // Data de cadastro automática

  // Relacionamento: ORG pode ter vários pets
  pets Pet[]

  // Índice em city para otimizar consultas por localização
  // RN: Para listar pets, obrigatoriamente precisamos informar a cidade
  @@index([city])
  @@map("pet_orgs") // Nome da tabela no banco
}

// Relacionamento: 1:N (One-to-Many)
// 1 ORG → N Pets ✅
// 1 Pet → 1 ORG ✅
